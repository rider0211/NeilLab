<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;

class poloniex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'poloniex',
            'name' => 'Poloniex',
            'countries' => array( 'US' ),
            'rateLimit' => 100,
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => null, // has but not fully implemented
                'swap' => null, // has but not fully implemented
                'future' => null, // has but not fully implemented
                'option' => null,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'createDepositAddress' => true,
                'createMarketOrder' => null,
                'createOrder' => true,
                'editOrder' => false,
                'fetchBalance' => true,
                'fetchClosedOrder' => false,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDeposits' => true,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrder' => false,
                'fetchOpenOrders' => true, // true endpoint for open orders
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => false,
                'fetchOrderTrades' => true, // true endpoint for trades of a single open or closed order
                'fetchPosition' => false,
                'fetchPositionMode' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => true,
                'fetchTransactions' => true,
                'fetchTransfer' => false,
                'fetchTransfers' => false,
                'fetchWithdrawals' => true,
                'transfer' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => 'MINUTE_1',
                '5m' => 'MINUTE_5',
                '10m' => 'MINUTE_10',
                '15m' => 'MINUTE_15',
                '30m' => 'MINUTE_30',
                '1h' => 'HOUR_1',
                '2h' => 'HOUR_2',
                '4h' => 'HOUR_4',
                '6h' => 'HOUR_6',
                '12h' => 'HOUR_12',
                '1d' => 'DAY_1',
                '3d' => 'DAY_3',
                '1w' => 'WEEK_1',
                '1M' => 'MONTH_1',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg',
                'api' => 'https://api.poloniex.com',
                'test' => 'https://sand-spot-api-gateway.poloniex.com',
                'www' => 'https://www.poloniex.com',
                'doc' => 'https://docs.poloniex.com',
                'fees' => 'https://poloniex.com/fees',
                'referral' => 'https://poloniex.com/signup?c=UBFZJRPJ',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'markets' => 1,
                        'markets/{symbol}' => 0.2,
                        'currencies' => 1,
                        'currencies/{currency}' => 1,
                        'timestamp' => 0.2,
                        'markets/price' => 0.2,
                        'markets/{symbol}/price' => 0.2,
                        'markets/{symbol}/orderBook' => 0.2,
                        'markets/{symbol}/candles' => 0.2,
                        'markets/{symbol}/trades' => 0.2,
                        'markets/ticker24h' => 1,
                        'markets/{symbol}/ticker24h' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'accounts' => 0.2,
                        'accounts/balances' => 0.2,
                        'accounts/{id}/balances' => 0.2,
                        'accounts/transfer' => 1,
                        'accounts/transfer/{id}' => 0.2,
                        'feeinfo' => 1,
                        'wallets/addresses' => 1,
                        'wallets/activity' => 1,
                        'wallets/addresses/{currency}' => 1,
                        'orders' => 1,
                        'orders/{id}' => 0.2,
                        'orders/history' => 1,
                        'smartorders' => 1,
                        'smartorders/{id}' => 0.2,
                        'smartorders/history' => 1,
                        'trades' => 1,
                        'orders/{id}/trades' => 0.2,
                    ),
                    'post' => array(
                        'accounts/transfer' => 0.2,
                        'wallets/address' => 1,
                        'wallets/withdraw' => 1,
                        'orders' => 0.2,
                        'smartorders' => 0.2,
                    ),
                    'delete' => array(
                        'orders/{id}' => 0.2,
                        'orders/cancelByIds' => 1,
                        'orders' => 1,
                        'smartorders/{id}' => 0.2,
                        'smartorders/cancelByIds' => 1,
                        'smartorders' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'feeSide' => 'get',
                    // starting from Jan 8 2020
                    'maker' => $this->parse_number('0.0009'),
                    'taker' => $this->parse_number('0.0009'),
                ),
                'funding' => array(),
            ),
            'commonCurrencies' => array(
                'AIR' => 'AirCoin',
                'APH' => 'AphroditeCoin',
                'BCC' => 'BTCtalkcoin',
                'BCHABC' => 'BCHABC',
                'BDG' => 'Badgercoin',
                'BTM' => 'Bitmark',
                'CON' => 'Coino',
                'GOLD' => 'GoldEagles',
                'GPUC' => 'GPU',
                'HOT' => 'Hotcoin',
                'ITC' => 'Information Coin',
                'KEY' => 'KEYCoin',
                'MASK' => 'NFTX Hashmasks Index', // conflict with Mask Network
                'MEME' => 'Degenerator Meme', // Degenerator Meme migrated to Meme Inu, this exchange still has the old price
                'PLX' => 'ParallaxCoin',
                'REPV2' => 'REP',
                'STR' => 'XLM',
                'SOC' => 'SOCC',
                'TRADE' => 'Unitrade',
                'XAP' => 'API Coin',
                // this is not documented in the API docs for Poloniex
                // https://github.com/ccxt/ccxt/issues/7084
                // when the user calls withdraw ('USDT', amount, address, tag, params)
                // with params = array( 'currencyToWithdrawAs' => 'USDTTRON' )
                // or params = array( 'currencyToWithdrawAs' => 'USDTETH' )
                // fetchWithdrawals ('USDT') returns the corresponding withdrawals
                // with a USDTTRON or a USDTETH currency id, respectfully
                // therefore we have map them back to the original code USDT
                // otherwise the returned withdrawals are filtered out
                'USDTTRON' => 'USDT',
                'USDTETH' => 'USDT',
                'UST' => 'USTC',
            ),
            'options' => array(
                'networks' => array(
                    'ERC20' => 'ETH',
                    'TRX' => 'TRON',
                    'TRC20' => 'TRON',
                ),
                'limits' => array(
                    'cost' => array(
                        'min' => array(
                            'BTC' => 0.0001,
                            'ETH' => 0.0001,
                            'USDT' => 1.0,
                            'TRX' => 100,
                            'BNB' => 0.06,
                            'USDC' => 1.0,
                            'USDJ' => 1.0,
                            'TUSD' => 0.0001,
                            'DAI' => 1.0,
                            'PAX' => 1.0,
                            'BUSD' => 1.0,
                        ),
                    ),
                ),
                'accountsByType' => array(
                    'spot' => 'spot',
                    'future' => 'futures',
                ),
                'accountsById' => array(
                    'exchange' => 'spot',
                    'futures' => 'future',
                ),
            ),
            'precisionMode' => DECIMAL_PLACES,
            'exceptions' => array(
                'exact' => array(
                    'You may only place orders that reduce your position.' => '\\ccxt\\InvalidOrder',
                    'Invalid order number, or you are not the person who placed the order.' => '\\ccxt\\OrderNotFound',
                    'Permission denied' => '\\ccxt\\PermissionDenied',
                    'Permission denied.' => '\\ccxt\\PermissionDenied',
                    'Connection timed out. Please try again.' => '\\ccxt\\RequestTimeout',
                    'Internal error. Please try again.' => '\\ccxt\\ExchangeNotAvailable',
                    'Currently in maintenance mode.' => '\\ccxt\\OnMaintenance',
                    'Order not found, or you are not the person who placed it.' => '\\ccxt\\OrderNotFound',
                    'Invalid API key/secret pair.' => '\\ccxt\\AuthenticationError',
                    'Please do not make more than 8 API calls per second.' => '\\ccxt\\RateLimitExceeded',
                    'This IP has been temporarily throttled. Please ensure your requests are valid and try again in one minute.' => '\\ccxt\\RateLimitExceeded',
                    'Rate must be greater than zero.' => '\\ccxt\\InvalidOrder', // array("error":"Rate must be greater than zero.")
                    'Invalid currency pair.' => '\\ccxt\\BadSymbol', // array("error":"Invalid currency pair.")
                    'Invalid currencyPair parameter.' => '\\ccxt\\BadSymbol', // array("error":"Invalid currencyPair parameter.")
                    'Trading is disabled in this market.' => '\\ccxt\\BadSymbol', // array("error":"Trading is disabled in this market.")
                    'Invalid orderNumber parameter.' => '\\ccxt\\OrderNotFound',
                    'Order is beyond acceptable bounds.' => '\\ccxt\\InvalidOrder', // array("error":"Order is beyond acceptable bounds.","fee":"0.00155000","currencyPair":"USDT_BOBA")
                    'This account is closed.' => '\\ccxt\\AccountSuspended', // array("error":"This account is closed.")
                ),
                'broad' => array(
                    'Total must be at least' => '\\ccxt\\InvalidOrder', // array("error":"Total must be at least 0.0001.")
                    'This account is frozen' => '\\ccxt\\AccountSuspended', // array("error":"This account is frozen for trading.") || array("error":"This account is frozen.")
                    'This account is locked.' => '\\ccxt\\AccountSuspended', // array("error":"This account is locked.")
                    'Not enough' => '\\ccxt\\InsufficientFunds',
                    'Nonce must be greater' => '\\ccxt\\InvalidNonce',
                    'You have already called cancelOrder' => '\\ccxt\\CancelPending', // array("error":"You have already called cancelOrder, moveOrder, or cancelReplace on this order. Please wait for that call's response.")
                    'Amount must be at least' => '\\ccxt\\InvalidOrder', // array("error":"Amount must be at least 0.000001.")
                    'is either completed or does not exist' => '\\ccxt\\OrderNotFound', // array("error":"Order 587957810791 is either completed or does not exist.")
                    'Error pulling ' => '\\ccxt\\ExchangeError', // array("error":"Error pulling order book")
                ),
            ),
        ));
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        //     array(
        //         array(
        //             "22814.01",
        //             "22937.42",
        //             "22832.57",
        //             "22937.42",
        //             "3916.58764051",
        //             "0.171199",
        //             "2982.64647063",
        //             "0.130295",
        //             33,
        //             0,
        //             "22877.449915304470460711",
        //             "MINUTE_5",
        //             1659664800000,
        //             1659665099999
        //         )
        //     )
        //
        return array(
            $this->safe_integer($ohlcv, 12),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 0),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '5m', $since = null, $limit = null, $params = array ()) {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int|null} $since timestamp in ms of the earliest candle to fetch
         * @param {int|null} $limit the maximum amount of candles to fetch
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'interval' => $this->timeframes[$timeframe],
        );
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            // $limit should in between 100 and 500
            $request['limit'] = $limit;
        }
        $response = $this->publicGetMarketsSymbolCandles (array_merge($request, $params));
        //
        //     array(
        //         array(
        //             "22814.01",
        //             "22937.42",
        //             "22832.57",
        //             "22937.42",
        //             "3916.58764051",
        //             "0.171199",
        //             "2982.64647063",
        //             "0.130295",
        //             33,
        //             0,
        //             "22877.449915304470460711",
        //             "MINUTE_5",
        //             1659664800000,
        //             1659665099999
        //         )
        //     )
        //
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function load_markets($reload = false, $params = array ()) {
        $markets = parent::load_markets($reload, $params);
        $currenciesByNumericId = $this->safe_value($this->options, 'currenciesByNumericId');
        if (($currenciesByNumericId === null) || $reload) {
            $this->options['currenciesByNumericId'] = $this->index_by($this->currencies, 'numericId');
        }
        return $markets;
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves data on all $markets for poloniex
         * @param {array} $params extra parameters specific to the exchange api endpoint
         * @return {[array]} an array of objects representing $market data
         */
        $markets = $this->publicGetMarkets ($params);
        //
        //     array(
        //         {
        //             "symbol" : "BTS_BTC",
        //             "baseCurrencyName" : "BTS",
        //             "quoteCurrencyName" : "BTC",
        //             "displayName" : "BTS/BTC",
        //             "state" : "NORMAL",
        //             "visibleStartTime" : 1659018816626,
        //             "tradableStartTime" : 1659018816626,
        //             "symbolTradeLimit" : {
        //                 "symbol" : "BTS_BTC",
        //                 "priceScale" : 10,
        //                 "quantityScale" : 0,
        //                 "amountScale" : 8,
        //                 "minQuantity" : "100",
        //                 "minAmount" : "0.00001",
        //                 "highestBid" : "0",
        //                 "lowestAsk" : "0"
        //             }
        //         }
        //     )
        //
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $this->safe_value($markets, $i);
            $id = $this->safe_string($market, 'symbol');
            $baseId = $this->safe_string($market, 'baseCurrencyName');
            $quoteId = $this->safe_string($market, 'quoteCurrencyName');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $state = $this->safe_string($market, 'state');
            $active = $state === 'NORMAL';
            $symbolTradeLimit = $this->safe_value($market, 'symbolTradeLimit');
            // these are known defaults
            $result[] = array(
                'id' => $id,
                'symbol' => $base . '/' . $quote,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => $active,
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $this->safe_number($symbolTradeLimit, 'quantityScale'),
                    'price' => $this->safe_number($symbolTradeLimit, 'priceScale'),
                ),
                'limits' => array(
                    'amount' => array(
                        'min' => $this->safe_number($symbolTradeLimit, 'minQuantity'),
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => $this->safe_number($symbolTradeLimit, 'minAmount'),
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_time($params = array ()) {
        /**
         * fetches the current integer timestamp in milliseconds from the exchange server
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {int} the current integer timestamp in milliseconds from the exchange server
         */
        $response = $this->publicGetTimestamp ($params);
        return $this->safe_integer($response, 'serverTime');
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //     {
        //         "symbol" : "BTC_USDT",
        //         "open" : "22814.93",
        //         "low" : "22441.90",
        //         "high" : "23413.00",
        //         "close" : "23148.66",
        //         "quantity" : "71.743706",
        //         "amount" : "1638994.52683452",
        //         "tradeCount" : 3893,
        //         "startTime" : 1659605760000,
        //         "closeTime" : 1659692161077,
        //         "displayName" : "BTC/USDT",
        //         "dailyChange" : "0.0152",
        //         "ts" : 1659692169838
        //     }
        //
        $timestamp = $this->safe_integer($ticker, 'ts');
        $marketId = $this->safe_string($ticker, 'symbol');
        $market = $this->market($marketId);
        $close = $this->safe_string($ticker, 'close');
        $relativeChange = $this->safe_string($ticker, 'percentChange');
        $percentage = Precise::string_mul($relativeChange, '100');
        return $this->safe_ticker(array(
            'id' => $marketId,
            'symbol' => $market['symbol'],
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => $this->safe_string($ticker, 'open'),
            'close' => $close,
            'last' => $close,
            'previousClose' => null,
            'change' => null,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $this->safe_string($ticker, 'quantity'),
            'quoteVolume' => $this->safe_string($ticker, 'amount'),
            'info' => $ticker,
        ), $market);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        /**
         * fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @param {[string]|null} $symbols unified $symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} an array of {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structures}
         */
        $this->load_markets();
        $symbols = $this->market_symbols($symbols);
        $response = $this->publicGetMarketsTicker24h ($params);
        //
        //     array(
        //         {
        //             "symbol" : "KUB_USDD",
        //             "open" : "0",
        //             "low" : "0",
        //             "high" : "0",
        //             "close" : "0",
        //             "quantity" : "0",
        //             "amount" : "0",
        //             "tradeCount" : 0,
        //             "startTime" : 1659606240000,
        //             "closeTime" : 1659692648742,
        //             "displayName" : "KUB/USDD",
        //             "dailyChange" : "0.00",
        //             "ts" : 1659692648742
        //         }
        //     )
        //
        return $this->parse_tickers($response, $symbols);
    }

    public function fetch_currencies($params = array ()) {
        /**
         * fetches all available currencies on an exchange
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} an associative dictionary of currencies
         */
        $response = $this->publicGetCurrencies ($params);
        //
        //     array(
        //         {
        //             "1CR" => {
        //                 "id" => 1,
        //                 "name" => "1CRedit",
        //                 "description" => "BTC Clone",
        //                 "type" => "address",
        //                 "withdrawalFee" => "0.01000000",
        //                 "minConf" => 10000,
        //                 "depositAddress" => null,
        //                 "blockchain" => "1CR",
        //                 "delisted" => false,
        //                 "tradingState" => "NORMAL",
        //                 "walletState" => "DISABLED",
        //                 "parentChain" => null,
        //                 "isMultiChain" => false,
        //                 "isChildChain" => false,
        //                 "childChains" => array()
        //             }
        //         }
        //     )
        //
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $item = $this->safe_value($response, $i);
            $ids = is_array($item) ? array_keys($item) : array();
            $id = $this->safe_value($ids, 0);
            $currency = $this->safe_value($item, $id);
            $code = $this->safe_currency_code($id);
            $delisted = $this->safe_value($currency, 'delisted');
            $walletState = $this->safe_string($currency, 'walletState');
            $enabled = $walletState === 'ENABLED';
            $listed = !$delisted;
            $active = $listed && $enabled;
            $numericId = $this->safe_integer($currency, 'id');
            $fee = $this->safe_number($currency, 'withdrawalFee');
            $result[$code] = array(
                'id' => $id,
                'numericId' => $numericId,
                'code' => $code,
                'info' => $currency,
                'name' => $currency['name'],
                'active' => $active,
                'deposit' => null,
                'withdraw' => null,
                'fee' => $fee,
                'precision' => null,
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => $fee,
                        'max' => null,
                    ),
                ),
            );
        }
        return $result;
    }

    public function fetch_ticker($symbol, $params = array ()) {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} a {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structure}
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetMarketsSymbolTicker24h (array_merge($request, $params));
        //
        //     {
        //         "symbol" : "BTC_USDT",
        //         "open" : "22814.93",
        //         "low" : "22441.90",
        //         "high" : "23413.00",
        //         "close" : "23148.66",
        //         "quantity" : "71.743706",
        //         "amount" : "1638994.52683452",
        //         "tradeCount" : 3893,
        //         "startTime" : 1659605760000,
        //         "closeTime" : 1659692161077,
        //         "displayName" : "BTC/USDT",
        //         "dailyChange" : "0.0152",
        //         "ts" : 1659692169838
        //     }
        //
        return $this->parse_ticker($response, $market);
    }

    public function parse_trade($trade, $market = null) {
        //
        // fetchTrades
        //
        //     {
        //         "id" : "60014521",
        //         "price" : "23162.94",
        //         "quantity" : "0.00009",
        //         "amount" : "2.0846646",
        //         "takerSide" : "SELL",
        //         "ts" : 1659684602042,
        //         "createTime" : 1659684602036
        //     }
        //
        // fetchMyTrades
        //
        //     {
        //         "id" => "32164924331503616",
        //         "symbol" => "LINK_USDT",
        //         "accountType" => "SPOT",
        //         "orderId" => "32164923987566592",
        //         "side" => "SELL",
        //         "type" => "MARKET",
        //         "matchRole" => "TAKER",
        //         "createTime" => 1648635115525,
        //         "price" => "11",
        //         "quantity" => "0.5",
        //         "amount" => "5.5",
        //         "feeCurrency" => "USDT",
        //         "feeAmount" => "0.007975",
        //         "pageId" => "32164924331503616",
        //         "clientOrderId" => "myOwnId-321"
        //     }
        //
        // fetchOrderTrades (taker trades)
        //
        //     {
        //         "id" => "30341456333942784",
        //         "symbol" => "LINK_USDT",
        //         "accountType" => "SPOT",
        //         "orderId" => "30249408733945856",
        //         "side" => "BUY",
        //         "type" => "LIMIT",
        //         "matchRole" => "MAKER",
        //         "createTime" => 1648200366864,
        //         "price" => "3.1",
        //         "quantity" => "1",
        //         "amount" => "3.1",
        //         "feeCurrency" => "LINK",
        //         "feeAmount" => "0.00145",
        //         "pageId" => "30341456333942784",
        //         "clientOrderId" => ""
        //     }
        //
        //
        $id = $this->safe_string_2($trade, 'id', 'tradeID');
        $orderId = $this->safe_string($trade, 'orderId');
        $timestamp = $this->safe_integer_2($trade, 'ts', 'createTime');
        $marketId = $this->safe_string($trade, 'symbol');
        $market = $this->safe_market($marketId, $market, '_');
        $symbol = $market['symbol'];
        $side = $this->safe_string_lower($trade, 'side');
        $fee = null;
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string($trade, 'quantity');
        $costString = $this->safe_string($trade, 'amount');
        $feeCurrencyId = $this->safe_string($trade, 'feeCurrency');
        $feeCostString = $this->safe_string($trade, 'feeAmount');
        if ($feeCostString !== null) {
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $feeCostString,
                'currency' => $feeCurrencyCode,
            );
        }
        return $this->safe_trade(array(
            'id' => $id,
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'order' => $orderId,
            'type' => $this->safe_string_lower($trade, 'type'),
            'side' => $side,
            'takerOrMaker' => $this->safe_string_lower($trade, 'matchRole'),
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => $costString,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        /**
         * get the list of most recent $trades for a particular $symbol
         * @param {string} $symbol unified $symbol of the $market to fetch $trades for
         * @param {int|null} $since timestamp in ms of the earliest trade to fetch
         * @param {int|null} $limit the maximum amount of $trades to fetch
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {[array]} a list of ~@link https://docs.ccxt.com/en/latest/manual.html?#public-$trades trade structures~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $trades = $this->publicGetMarketsSymbolTrades (array_merge($request, $params));
        //
        //     array(
        //         {
        //             "id" : "60014521",
        //             "price" : "23162.94",
        //             "quantity" : "0.00009",
        //             "amount" : "2.0846646",
        //             "takerSide" : "SELL",
        //             "ts" : 1659684602042,
        //             "createTime" : 1659684602036
        //         }
        //     )
        //
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all trades made by the user
         * @param {string|null} $symbol unified $market $symbol
         * @param {int|null} $since the earliest time in ms to fetch trades for
         * @param {int|null} $limit the maximum number of trades structures to retrieve
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#trade-structure trade structures}
         */
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array(
            // 'from' => 12345678, // A 'trade Id'. The query begins at ‘from'.
            // 'direction' => 'PRE', // PRE, NEXT The direction before or after ‘from'.
        );
        if ($since !== null) {
            $request['startTime'] = intval($since / 1000);
            $request['endtime'] = $this->sum($this->seconds(), 1); // adding 1 is a fix for #3411
        }
        // $limit is disabled (does not really work as expected)
        if ($limit !== null) {
            $request['limit'] = intval($limit);
        }
        $response = $this->privateGetTrades (array_merge($request, $params));
        //
        //     array(
        //         {
        //             "id" => "32164924331503616",
        //             "symbol" => "LINK_USDT",
        //             "accountType" => "SPOT",
        //             "orderId" => "32164923987566592",
        //             "side" => "SELL",
        //             "type" => "MARKET",
        //             "matchRole" => "TAKER",
        //             "createTime" => 1648635115525,
        //             "price" => "11",
        //             "quantity" => "0.5",
        //             "amount" => "5.5",
        //             "feeCurrency" => "USDT",
        //             "feeAmount" => "0.007975",
        //             "pageId" => "32164924331503616",
        //             "clientOrderId" => "myOwnId-321"
        //         }
        //     )
        //
        $result = $this->parse_trades($response, $market);
        return $this->filter_by_since_limit($result, $since, $limit);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'NEW' => 'open',
            'PARTIALLY_FILLED' => 'open',
            'FILLED' => 'closed',
            'PENDING_CANCEL' => 'canceled',
            'PARTIALLY_CANCELED' => 'canceled',
            'CANCELED' => 'canceled',
            'FAILED' => 'canceled',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        //
        // fetchOpenOrder
        //
        //     {
        //         "id" : "7xxxxxxxxxxxxxxx6",
        //         "clientOrderId" : "",
        //         "symbol" : "ETH_USDT",
        //         "state" : "NEW",
        //         "accountType" : "SPOT",
        //         "side" : "BUY",
        //         "type" : "LIMIT",
        //         "timeInForce" : "GTC",
        //         "quantity" : "0.001",
        //         "price" : "1600",
        //         "avgPrice" : "0",
        //         "amount" : "0",
        //         "filledQuantity" : "0",
        //         "filledAmount" : "0",
        //         "createTime" : 16xxxxxxxxx26,
        //         "updateTime" : 16xxxxxxxxx36
        //     }
        //
        // fetchOpenOrders
        //
        //     {
        //         "id" => "24993088082542592",
        //         "clientOrderId" => "",
        //         "symbol" => "ELON_USDC",
        //         "state" => "NEW",
        //         "accountType" => "SPOT",
        //         "side" => "SELL",
        //         "type" => "MARKET",
        //         "timeInForce" => "GTC",
        //         "quantity" => "1.00",
        //         "price" => "0.00",
        //         "avgPrice" => "0.00",
        //         "amount" => "0.00",
        //         "filledQuantity" => "0.00",
        //         "filledAmount" => "0.00",
        //         "createTime" => 1646925216548,
        //         "updateTime" => 1646925216548
        //     }
        //
        // createOrder
        //
        //     {
        //         "id" => "29772698821328896",
        //         "clientOrderId" => "1234Abc"
        //     }
        //
        $timestamp = $this->safe_integer_2($order, 'timestamp', 'createTime');
        if ($timestamp === null) {
            $timestamp = $this->parse8601($this->safe_string($order, 'date'));
        }
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market, '_');
        $symbol = $market['symbol'];
        $resultingTrades = $this->safe_value($order, 'resultingTrades');
        if (gettype($resultingTrades) !== 'array' || array_keys($resultingTrades) !== array_keys(array_keys($resultingTrades))) {
            $resultingTrades = $this->safe_value($resultingTrades, $this->safe_string($market, 'id', $marketId));
        }
        $price = $this->safe_string_2($order, 'price', 'rate');
        $amount = $this->safe_string($order, 'quantity');
        $filled = $this->safe_string($order, 'filledQuantity');
        $status = $this->parse_order_status($this->safe_string($order, 'state'));
        $side = $this->safe_string_lower($order, 'side');
        $rawType = $this->safe_string($order, 'type');
        $type = $this->parse_order_type($rawType);
        $id = $this->safe_string_2($order, 'orderNumber', 'id');
        $fee = null;
        $feeCurrency = $this->safe_string($order, 'tokenFeeCurrency');
        $feeCost = null;
        $feeCurrencyCode = null;
        $rate = $this->safe_string($order, 'fee');
        if ($feeCurrency === null) {
            $feeCurrencyCode = ($side === 'buy') ? $market['base'] : $market['quote'];
        } else {
            // poloniex accepts a 30% discount to pay fees in TRX
            $feeCurrencyCode = $this->safe_currency_code($feeCurrency);
            $feeCost = $this->safe_string($order, 'tokenFee');
        }
        if ($feeCost !== null) {
            $fee = array(
                'rate' => $rate,
                'cost' => $feeCost,
                'currency' => $feeCurrencyCode,
            );
        }
        $clientOrderId = $this->safe_string($order, 'clientOrderId');
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $this->safe_integer($order, 'updateTime'),
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $this->safe_string($order, 'timeInForce'),
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'cost' => null,
            'average' => $this->safe_string($order, 'avgPrice'),
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => null,
            'trades' => $resultingTrades,
            'fee' => $fee,
        ), $market);
    }

    public function parse_order_type($status) {
        $statuses = array(
            'MARKET' => 'market',
            'LIMIT' => 'limit',
            'STOP-LIMIT' => 'limit',
            'STOP-MARKET' => 'market',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_open_orders($orders, $market, $result) {
        for ($i = 0; $i < count($orders); $i++) {
            $order = $orders[$i];
            $extended = array_merge($order, array(
                'status' => 'open',
                'type' => 'limit',
                'side' => $order['type'],
                'price' => $order['rate'],
            ));
            $result[] = $this->parse_order($extended, $market);
        }
        return $result;
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all unfilled currently open orders
         * @param {string|null} $symbol unified $market $symbol
         * @param {int|null} $since the earliest time in ms to fetch open orders for
         * @param {int|null} $limit the maximum number of  open orders structures to retrieve
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structures}
         */
        $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privateGetOrders (array_merge($request, $params));
        //
        //     array(
        //         {
        //             "id" : "7xxxxxxxxxxxxxxx6",
        //             "clientOrderId" : "",
        //             "symbol" : "ETH_USDT",
        //             "state" : "NEW",
        //             "accountType" : "SPOT",
        //             "side" : "BUY",
        //             "type" : "LIMIT",
        //             "timeInForce" : "GTC",
        //             "quantity" : "0.001",
        //             "price" : "1600",
        //             "avgPrice" : "0",
        //             "amount" : "0",
        //             "filledQuantity" : "0",
        //             "filledAmount" : "0",
        //             "createTime" : 16xxxxxxxxx26,
        //             "updateTime" : 16xxxxxxxxx36
        //         }
        //     )
        //
        $extension = array( 'status' => 'open' );
        return $this->parse_orders($response, $market, $since, $limit, $extension);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        /**
         * create a trade order
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of currency you want to trade in units of base currency
         * @param {float|null} $price the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} an {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structure}
         */
        // if ($type === 'market') {
        //     throw new ExchangeError($this->id . ' createOrder() does not accept $market orders');
        // }
        $this->load_markets();
        $market = $this->market($symbol);
        $upperCaseType = strtoupper($type);
        $isMarket = $upperCaseType === 'MARKET';
        $isPostOnly = $this->is_post_only($isMarket, $upperCaseType === 'LIMIT_MAKER', $params);
        if ($isPostOnly) {
            $upperCaseType = 'LIMIT_MAKER';
            $params = $this->omit($params, 'postOnly');
        }
        $request = array(
            'symbol' => $market['id'],
            'side' => $side,
            'type' => $upperCaseType,
            // 'timeInForce' => timeInForce,
            // 'accountType' => 'SPOT',
            // 'amount' => $amount,
        );
        if ($isMarket) {
            if ($side === 'buy') {
                $request['amount'] = $this->currency_to_precision($market['quote'], $amount);
            } else {
                $request['quantity'] = $this->amount_to_precision($symbol, $amount);
            }
        } else {
            $request['quantity'] = $this->amount_to_precision($symbol, $amount);
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $clientOrderId = $this->safe_string($params, 'clientOrderId');
        if ($clientOrderId !== null) {
            $request['clientOrderId'] = $clientOrderId;
            $params = $this->omit($params, 'clientOrderId');
        }
        // remember the timestamp before issuing the $request
        $response = $this->privatePostOrders (array_merge($request, $params));
        //
        //     {
        //         "id" : "78923648051920896",
        //         "clientOrderId" : ""
        //     }
        //
        $response = array_merge($response, array(
            'type' => $side,
        ));
        return $this->parse_order($response, $market);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        /**
         * cancels an open order
         * @param {string} $id order $id
         * @param {string|null} $symbol unified $symbol of the market the order was made in
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} An {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structure}
         */
        $this->load_markets();
        $request = array();
        $clientOrderId = $this->safe_value($params, 'clientOrderId');
        if ($clientOrderId !== null) {
            $id = $clientOrderId;
        }
        $request['id'] = $id;
        $params = $this->omit($params, 'clientOrderId');
        return $this->privateDeleteOrdersId (array_merge($request, $params));
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        /**
         * cancel all open orders
         * @param {string|null} $symbol unified $market $symbol, only orders in the $market of this $symbol are cancelled when $symbol is not null
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structures}
         */
        $this->load_markets();
        $request = array(
            // 'accountTypes' => 'SPOT',
        );
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbols'] = [
                $market['id'],
            ];
        }
        $response = $this->privateDeleteOrders (array_merge($request, $params));
        //
        //     array(
        //         array(
        //             "orderId" : "78xxxxxxxx80",
        //             "clientOrderId" : "",
        //             "state" : "NEW",
        //             "code" : 200,
        //             "message" : ""
        //         ), {
        //             "orderId" : "78xxxxxxxxx80",
        //             "clientOrderId" : "",
        //             "state" : "NEW",
        //             "code" : 200,
        //             "message" : ""
        //         }
        //     )
        //
        return $response;
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        /**
         * fetch an order by it's $id
         * @param {string} $id order $id
         * @param {string|null} $symbol unified market $symbol, default is null
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} an {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structure}
         */
        $this->load_markets();
        $id = (string) $id;
        $request = array(
            'id' => $id,
        );
        $response = $this->privateGetOrdersId (array_merge($request, $params));
        //
        //     {
        //         "id" => "21934611974062080",
        //         "clientOrderId" => "123",
        //         "symbol" => "TRX_USDC",
        //         "state" => "NEW",
        //         "accountType" => "SPOT",
        //         "side" => "SELL",
        //         "type" => "LIMIT",
        //         "timeInForce" => "GTC",
        //         "quantity" => "1.00",
        //         "price" => "10.00",
        //         "avgPrice" => "0.00",
        //         "amount" => "0.00",
        //         "filledQuantity" => "0.00",
        //         "filledAmount" => "0.00",
        //         "createTime" => 1646196019020,
        //         "updateTime" => 1646196019020
        //     }
        //
        return array_merge($this->parse_order($response), array(
            'id' => $id,
        ));
    }

    public function fetch_order_status($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $orders = $this->fetch_open_orders($symbol, null, null, $params);
        $indexed = $this->index_by($orders, 'id');
        return (is_array($indexed) && array_key_exists($id, $indexed)) ? 'open' : 'closed';
    }

    public function fetch_order_trades($id, $symbol = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all the $trades made from a single order
         * @param {string} $id order $id
         * @param {string|null} $symbol unified market $symbol
         * @param {int|null} $since the earliest time in ms to fetch $trades for
         * @param {int|null} $limit the maximum number of $trades to retrieve
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#trade-structure trade structures}
         */
        $this->load_markets();
        $request = array(
            'id' => $id,
        );
        $trades = $this->privateGetOrdersIdTrades (array_merge($request, $params));
        //
        //     array(
        //         {
        //             "id" => "30341456333942784",
        //             "symbol" => "LINK_USDT",
        //             "accountType" => "SPOT",
        //             "orderId" => "30249408733945856",
        //             "side" => "BUY",
        //             "type" => "LIMIT",
        //             "matchRole" => "MAKER",
        //             "createTime" => 1648200366864,
        //             "price" => "3.1",
        //             "quantity" => "1",
        //             "amount" => "3.1",
        //             "feeCurrency" => "LINK",
        //             "feeAmount" => "0.00145",
        //             "pageId" => "30341456333942784",
        //             "clientOrderId" => ""
        //         }
        //     )
        //
        return $this->parse_trades($trades);
    }

    public function parse_balance($response) {
        $result = array(
            'info' => $response,
            'timestamp' => null,
            'datetime' => null,
        );
        for ($i = 0; $i < count($response); $i++) {
            $account = $this->safe_value($response, $i, array());
            $balances = $this->safe_value($account, 'balances');
            for ($j = 0; $j < count($balances); $j++) {
                $balance = $this->safe_value($balances, $j);
                $currencyId = $this->safe_string($balance, 'currency');
                $code = $this->safe_currency_code($currencyId);
                $newAccount = $this->account();
                $newAccount['free'] = $this->safe_string($balance, 'available');
                $newAccount['used'] = $this->safe_string($balance, 'hold');
                $result[$code] = $newAccount;
            }
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
         */
        $this->load_markets();
        $request = array(
            'accountType' => 'SPOT',
        );
        $response = $this->privateGetAccountsBalances (array_merge($request, $params));
        //
        //     array(
        //         {
        //             "accountId" : "7xxxxxxxxxx8",
        //             "accountType" : "SPOT",
        //             "balances" : array(
        //                 {
        //                     "currencyId" : "214",
        //                     "currency" : "USDT",
        //                     "available" : "2.00",
        //                     "hold" : "0.00"
        //                 }
        //             )
        //         }
        //     )
        //
        return $this->parse_balance($response);
    }

    public function fetch_trading_fees($params = array ()) {
        /**
         * fetch the trading fees for multiple markets
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} a dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#fee-structure fee structures} indexed by market symbols
         */
        $this->load_markets();
        $response = $this->privateGetFeeinfo ($params);
        //
        //     {
        //         "trxDiscount" : false,
        //         "makerRate" : "0.00145",
        //         "takerRate" : "0.00155",
        //         "volume30D" : "0.00"
        //     }
        //
        $result = array();
        for ($i = 0; $i < count($this->symbols); $i++) {
            $symbol = $this->symbols[$i];
            $result[$symbol] = array(
                'info' => $response,
                'symbol' => $symbol,
                'maker' => $this->safe_number($response, 'makerRate'),
                'taker' => $this->safe_number($response, 'takerRate'),
                'percentage' => true,
                'tierBased' => true,
            );
        }
        return $result;
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int|null} $limit the maximum $amount of order book entries to return
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by $market symbols
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit; // The default value of $limit is 10. Valid $limit values are => 5, 10, 20, 50, 100, 150.
        }
        $response = $this->publicGetMarketsSymbolOrderBook (array_merge($request, $params));
        //
        //     {
        //         "time" : 1659695219507,
        //         "scale" : "-1",
        //         "asks" : array( "23139.82", "0.317981", "23140", "0.191091", "23170.06", "0.01", "23200", "0.107758", "23230.55", "0.01", "23247.2", "0.154", "23254", "0.005121", "23263", "0.038", "23285.4", "0.308", "23300", "0.108896" ),
        //         "bids" : array( "23139.74", "0.432092", "23139.73", "0.198592", "23123.21", "0.000886", "23123.2", "0.308", "23121.4", "0.154", "23105", "0.000789", "23100", "0.078175", "23069.1", "0.026276", "23068.83", "0.001329", "23051", "0.000048" ),
        //         "ts" : 1659695219513
        //     }
        //
        $timestamp = $this->safe_integer($response, 'time');
        $asks = $this->safe_value($response, 'asks');
        $bids = $this->safe_value($response, 'bids');
        $asksResult = array();
        $bidsResult = array();
        for ($i = 0; $i < count($asks); $i++) {
            if ((fmod($i, 2)) === 0) {
                $price = $this->safe_number($asks, $i);
                $amount = $this->safe_number($asks, $this->sum($i, 1));
                $asksResult[] = array( $price, $amount );
            }
        }
        for ($i = 0; $i < count($bids); $i++) {
            if ((fmod($i, 2)) === 0) {
                $price = $this->safe_number($bids, $i);
                $amount = $this->safe_number($bids, $this->sum($i, 1));
                $bidsResult[] = array( $price, $amount );
            }
        }
        return array(
            'symbol' => $market['symbol'],
            'bids' => $this->sort_by($bidsResult, 0, true),
            'asks' => $this->sort_by($asksResult, 0),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'nonce' => null,
        );
    }

    public function create_deposit_address($code, $params = array ()) {
        /**
         * create a $currency deposit $address
         * @param {string} $code unified $currency $code of the $currency for the deposit $address
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} an {@link https://docs.ccxt.com/en/latest/manual.html#$address-structure $address structure}
         */
        $this->load_markets();
        // USDT, USDTETH, USDTTRON
        $currencyId = null;
        $currency = null;
        if (is_array($this->currencies) && array_key_exists($code, $this->currencies)) {
            $currency = $this->currency($code);
            $currencyId = $currency['id'];
        } else {
            $currencyId = $code;
        }
        $request = array(
            'currency' => $currencyId,
        );
        $response = $this->privatePostWalletsAddress (array_merge($request, $params));
        //
        //     {
        //         "address" : "0xfxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxf"
        //     }
        //
        $address = $this->safe_string($response, 'address');
        $tag = null;
        $this->check_address($address);
        if ($currency !== null) {
            $depositAddress = $this->safe_string($currency['info'], 'depositAddress');
            if ($depositAddress !== null) {
                $tag = $address;
                $address = $depositAddress;
            }
        }
        return array(
            'currency' => $code,
            'address' => $address,
            'tag' => $tag,
            'info' => $response,
        );
    }

    public function fetch_deposit_address($code, $params = array ()) {
        /**
         * fetch the deposit $address for a $currency associated with this account
         * @param {string} $code unified $currency $code
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} an {@link https://docs.ccxt.com/en/latest/manual.html#$address-structure $address structure}
         */
        $this->load_markets();
        // USDT, USDTETH, USDTTRON
        $currencyId = null;
        $currency = null;
        if (is_array($this->currencies) && array_key_exists($code, $this->currencies)) {
            $currency = $this->currency($code);
            $currencyId = $currency['id'];
        } else {
            $currencyId = $code;
        }
        $request = array(
            'currency' => $currencyId,
        );
        $response = $this->privateGetWalletsAddresses (array_merge($request, $params));
        //
        //     {
        //         "USDTTRON" : "Txxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxp"
        //     }
        //
        $address = $this->safe_string($response, $currencyId);
        $tag = null;
        $this->check_address($address);
        if ($currency !== null) {
            $depositAddress = $this->safe_string($currency['info'], 'depositAddress');
            if ($depositAddress !== null) {
                $tag = $address;
                $address = $depositAddress;
            }
        }
        return array(
            'currency' => $code,
            'address' => $address,
            'tag' => $tag,
            'network' => null,
            'info' => $response,
        );
    }

    public function transfer($code, $amount, $fromAccount, $toAccount, $params = array ()) {
        /**
         * transfer $currency internally between wallets on the same account
         * @param {string} $code unified $currency $code
         * @param {float} $amount amount to transfer
         * @param {string} $fromAccount account to transfer from
         * @param {string} $toAccount account to transfer to
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} a {@link https://docs.ccxt.com/en/latest/manual.html#transfer-structure transfer structure}
         */
        $this->load_markets();
        $currency = $this->currency($code);
        $amount = $this->currency_to_precision($code, $amount);
        $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
        $fromId = $this->safe_string($accountsByType, $fromAccount, $fromAccount);
        $toId = $this->safe_string($accountsByType, $toAccount, $fromAccount);
        $request = array(
            'amount' => $amount,
            'currency' => $currency['id'],
            'fromAccount' => $fromId,
            'toAccount' => $toId,
        );
        $response = $this->privatePostAccountsTransfer (array_merge($request, $params));
        //
        //    {
        //        success => '1',
        //        message => 'Transferred 1.00000000 USDT from exchange to lending account.'
        //    }
        //
        return $this->parse_transfer($response, $currency);
    }

    public function parse_transfer_status($status) {
        $statuses = array(
            '1' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transfer($transfer, $currency = null) {
        //
        //    {
        //        success => '1',
        //        $message => 'Transferred 1.00000000 USDT from exchange to lending account.'
        //    }
        //
        $message = $this->safe_string($transfer, 'message');
        $words = explode(' ', $message);
        $amount = $this->safe_number($words, 1);
        $currencyId = $this->safe_string($words, 2);
        $fromAccountId = $this->safe_string($words, 4);
        $toAccountId = $this->safe_string($words, 6);
        $accountsById = $this->safe_value($this->options, 'accountsById', array());
        return array(
            'info' => $transfer,
            'id' => null,
            'timestamp' => null,
            'datetime' => null,
            'currency' => $this->safe_currency_code($currencyId, $currency),
            'amount' => $amount,
            'fromAccount' => $this->safe_string($accountsById, $fromAccountId),
            'toAccount' => $this->safe_string($accountsById, $toAccountId),
            'status' => $this->parse_order_status($this->safe_string($transfer, 'success', 'failed')),
        );
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        /**
         * make a withdrawal
         * @param {string} $code unified $currency $code
         * @param {float} $amount the $amount to withdraw
         * @param {string} $address the $address to withdraw to
         * @param {string|null} $tag
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} a {@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure transaction structure}
         */
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->check_address($address);
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
            'amount' => $amount,
            'address' => $address,
        );
        if ($tag !== null) {
            $request['paymentId'] = $tag;
        }
        $networks = $this->safe_value($this->options, 'networks', array());
        $network = $this->safe_string_upper($params, 'network'); // this line allows the user to specify either ERC20 or ETH
        $network = $this->safe_string($networks, $network, $network); // handle ERC20>ETH alias
        if ($network !== null) {
            $request['currency'] .= $network; // when $network the $currency need to be changed to $currency+$network https://docs.poloniex.com/#withdraw on MultiChain Currencies section
            $params = $this->omit($params, 'network');
        }
        $response = $this->privatePostWalletsWithdraw (array_merge($request, $params));
        //
        //     {
        //         $response => 'Withdrew 1.00000000 USDT.',
        //         email2FA => false,
        //         withdrawalNumber => 13449869
        //     }
        //
        return $this->parse_transaction($response, $currency);
    }

    public function fetch_transactions_helper($code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $year = 31104000; // 60 * 60 * 24 * 30 * 12 = one $year of history, why not
        $now = $this->seconds();
        $start = ($since !== null) ? intval($since / 1000) : $now - 10 * $year;
        $request = array(
            'start' => $start, // UNIX timestamp, required
            'end' => $now, // UNIX timestamp, required
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privateGetWalletsActivity (array_merge($request, $params));
        //
        //     {
        //         "adjustments":array(),
        //         "deposits":array(
        //             array(
        //                 currency => "BTC",
        //                 address => "1MEtiqJWru53FhhHrfJPPvd2tC3TPDVcmW",
        //                 amount => "0.01063000",
        //                 confirmations =>  1,
        //                 txid => "952b0e1888d6d491591facc0d37b5ebec540ac1efb241fdbc22bcc20d1822fb6",
        //                 timestamp =>  1507916888,
        //                 status => "COMPLETE"
        //             ),
        //             {
        //                 currency => "ETH",
        //                 address => "0x20108ba20b65c04d82909e91df06618107460197",
        //                 amount => "4.00000000",
        //                 confirmations => 38,
        //                 txid => "0x4be260073491fe63935e9e0da42bd71138fdeb803732f41501015a2d46eb479d",
        //                 timestamp => 1525060430,
        //                 status => "COMPLETE"
        //             }
        //         ),
        //         "withdrawals":array(
        //             array(
        //                 "withdrawalNumber":13449869,
        //                 "currency":"USDTTRON", // not documented in API docs, see commonCurrencies in describe()
        //                 "address":"TXGaqPW23JdRWhsVwS2mRsGsegbdnAd3Rw",
        //                 "amount":"1.00000000",
        //                 "fee":"0.00000000",
        //                 "timestamp":1591573420,
        //                 "status":"COMPLETE => dadf427224b3d44b38a2c13caa4395e4666152556ca0b2f67dbd86a95655150f",
        //                 "ipAddress":"x.x.x.x",
        //                 "canCancel":0,
        //                 "canResendEmail":0,
        //                 "paymentID":null,
        //                 "scope":"crypto"
        //             ),
        //             array(
        //                 withdrawalNumber => 8224394,
        //                 currency => "EMC2",
        //                 address => "EYEKyCrqTNmVCpdDV8w49XvSKRP9N3EUyF",
        //                 amount => "63.10796020",
        //                 fee => "0.01000000",
        //                 timestamp => 1510819838,
        //                 status => "COMPLETE => d37354f9d02cb24d98c8c4fc17aa42f475530b5727effdf668ee5a43ce667fd6",
        //                 ipAddress => "x.x.x.x"
        //             ),
        //             array(
        //                 withdrawalNumber => 9290444,
        //                 currency => "ETH",
        //                 address => "0x191015ff2e75261d50433fbd05bd57e942336149",
        //                 amount => "0.15500000",
        //                 fee => "0.00500000",
        //                 timestamp => 1514099289,
        //                 status => "COMPLETE => 0x12d444493b4bca668992021fd9e54b5292b8e71d9927af1f076f554e4bea5b2d",
        //                 ipAddress => "x.x.x.x"
        //             ),
        //             {
        //                 withdrawalNumber => 11518260,
        //                 currency => "BTC",
        //                 address => "8JoDXAmE1GY2LRK8jD1gmAmgRPq54kXJ4t",
        //                 amount => "0.20000000",
        //                 fee => "0.00050000",
        //                 timestamp => 1527918155,
        //                 status => "COMPLETE => 1864f4ebb277d90b0b1ff53259b36b97fa1990edc7ad2be47c5e0ab41916b5ff",
        //                 ipAddress => "x.x.x.x"
        //             }
        //         )
        //     }
        //
        return $response;
    }

    public function fetch_transactions($code = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch history of $deposits and $withdrawals
         * @param {string|null} $code unified $currency $code for the $currency of the $transactions, default is null
         * @param {int|null} $since timestamp in ms of the earliest transaction, default is null
         * @param {int|null} $limit max number of $transactions to return, default is null
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {array} a list of {@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure transaction structure}
         */
        $this->load_markets();
        $response = $this->fetch_transactions_helper($code, $since, $limit, $params);
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
        }
        $withdrawals = $this->safe_value($response, 'withdrawals', array());
        $deposits = $this->safe_value($response, 'deposits', array());
        $withdrawalTransactions = $this->parse_transactions($withdrawals, $currency, $since, $limit);
        $depositTransactions = $this->parse_transactions($deposits, $currency, $since, $limit);
        $transactions = $this->array_concat($depositTransactions, $withdrawalTransactions);
        return $this->filter_by_currency_since_limit($this->sort_by($transactions, 'timestamp'), $code, $since, $limit);
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all $withdrawals made from an account
         * @param {string|null} $code unified $currency $code
         * @param {int|null} $since the earliest time in ms to fetch $withdrawals for
         * @param {int|null} $limit the maximum number of $withdrawals structures to retrieve
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure transaction structures}
         */
        $response = $this->fetch_transactions_helper($code, $since, $limit, $params);
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
        }
        $withdrawals = $this->safe_value($response, 'withdrawals', array());
        $transactions = $this->parse_transactions($withdrawals, $currency, $since, $limit);
        return $this->filter_by_currency_since_limit($transactions, $code, $since, $limit);
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        /**
         * fetch all $deposits made to an account
         * @param {string|null} $code unified $currency $code
         * @param {int|null} $since the earliest time in ms to fetch $deposits for
         * @param {int|null} $limit the maximum number of $deposits structures to retrieve
         * @param {array} $params extra parameters specific to the poloniex api endpoint
         * @return {[array]} a list of {@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure transaction structures}
         */
        $response = $this->fetch_transactions_helper($code, $since, $limit, $params);
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
        }
        $deposits = $this->safe_value($response, 'deposits', array());
        $transactions = $this->parse_transactions($deposits, $currency, $since, $limit);
        return $this->filter_by_currency_since_limit($transactions, $code, $since, $limit);
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'COMPLETE' => 'ok',
            'COMPLETED' => 'ok',
            'AWAITING APPROVAL' => 'pending',
            'PENDING' => 'pending',
            'PROCESSING' => 'pending',
            'COMPLETE ERROR' => 'failed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // deposits
        //
        //     {
        //         "txid" => "f49d489616911db44b740612d19464521179c76ebe9021af85b6de1e2f8d68cd",
        //         "type" => "deposit",
        //         "amount" => "49798.01987021",
        //         "status" => "COMPLETE",
        //         "address" => "DJVJZ58tJC8UeUv9Tqcdtn6uhWobouxFLT",
        //         "currency" => "DOGE",
        //         "timestamp" => 1524321838,
        //         "confirmations" => 3371,
        //         "depositNumber" => 134587098
        //     }
        //
        // withdrawals
        //
        //     {
        //         "fee" => "0.00050000",
        //         "type" => "withdrawal",
        //         "amount" => "0.40234387",
        //         "status" => "COMPLETE => fbabb2bf7d81c076f396f3441166d5f60f6cea5fdfe69e02adcc3b27af8c2746",
        //         "address" => "1EdAqY4cqHoJGAgNfUFER7yZpg1Jc9DUa3",
        //         "currency" => "BTC",
        //         "canCancel" => 0,
        //         "ipAddress" => "x.x.x.x",
        //         "paymentID" => null,
        //         "timestamp" => 1523834337,
        //         "canResendEmail" => 0,
        //         "withdrawalNumber" => 11162900
        //     }
        //
        // withdraw
        //
        //     {
        //         response => 'Withdrew 1.00000000 USDT.',
        //         email2FA => false,
        //         withdrawalNumber => 13449869
        //     }
        //
        $timestamp = $this->safe_timestamp($transaction, 'timestamp');
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId);
        $status = $this->safe_string($transaction, 'status', 'pending');
        $status = $this->parse_transaction_status($status);
        $txid = $this->safe_string($transaction, 'txid');
        $type = (is_array($transaction) && array_key_exists('withdrawalRequestsId', $transaction)) ? 'withdrawal' : 'deposit';
        $id = $this->safe_string_2($transaction, 'withdrawalRequestsId', 'depositNumber');
        $amount = $this->safe_number($transaction, 'amount');
        $address = $this->safe_string($transaction, 'address');
        $tag = $this->safe_string($transaction, 'paymentID');
        // according to https://poloniex.com/fees/
        $feeCost = $this->safe_number($transaction, 'fee');
        return array(
            'info' => $transaction,
            'id' => $id,
            'currency' => $code,
            'amount' => $amount,
            'network' => null,
            'address' => $address,
            'addressTo' => null,
            'addressFrom' => null,
            'tag' => $tag,
            'tagTo' => null,
            'tagFrom' => null,
            'status' => $status,
            'type' => $type,
            'updated' => null,
            'txid' => $txid,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'fee' => array(
                'currency' => $code,
                'cost' => $feeCost,
            ),
        );
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'];
        $query = $this->omit($params, $this->extract_params($path));
        $implodedPath = $this->implode_params($path, $params);
        if ($api === 'public') {
            $url .= '/' . $implodedPath;
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            $this->check_required_credentials();
            $timestamp = (string) $this->nonce();
            $auth = $method . "\n"; // eslint-disable-line quotes
            $url .= '/' . $implodedPath;
            $auth .= '/' . $implodedPath;
            if (($method === 'POST') || ($method === 'PUT') || ($method === 'DELETE')) {
                $auth .= "\n"; // eslint-disable-line quotes
                if ($query) {
                    $body = $this->json($query);
                    $auth .= 'requestBody=' . $body . '&';
                }
                $auth .= 'signTimestamp=' . $timestamp;
            } else {
                $sortedQuery = array_merge(array( 'signTimestamp' => $timestamp ), $query);
                $sortedQuery = $this->keysort($sortedQuery);
                $auth .= "\n" . $this->urlencode($sortedQuery); // eslint-disable-line quotes
                if ($query) {
                    $url .= '?' . $this->urlencode($query);
                }
            }
            $signature = $this->hmac($this->encode($auth), $this->encode($this->secret), 'sha256', 'base64');
            $headers = array(
                'Content-Type' => 'application/json',
                'key' => $this->apiKey,
                'signTimestamp' => $timestamp,
                'signature' => $signature,
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return;
        }
        // array("error":"Permission denied.")
        if (is_array($response) && array_key_exists('error', $response)) {
            $message = $response['error'];
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback); // unknown $message
        }
    }
}
